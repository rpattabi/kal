#!/usr/bin/env ruby

require 'sinatra'
require 'slim'
require 'fileutils'
require 'os'

get '/' do
  slim :index
end

post '/' do
  puts params[:root]
  @audios = get_audio_files(params[:root])
  puts @audios.to_s

  slim :index
end

def get_audio_files(path)
  root_sym = './public/root_sym'
  File.delete root_sym if File.exist? root_sym
  File.symlink(path, root_sym)

  Dir["#{root_sym}**{,/*/**}/*.{ogg,mp3}"].collect do |f|
    Audio.new(f)
  end
end

class Audio
  attr_accessor :title, :path, :original_path

  def initialize(original_path)
    @title, @original_path = File.basename(original_path), original_path
    @path = "root_sym/#{@title}"
  end
end

class File
  def self.symlink(original, link)
    unless OS::windows?
      File.symlink(original, link)
    else
      Windows::symlink(original, link)
    end
  end

  def self.expand_path_windows(path)
    expand_path(path).gsub(/\//, '\\')
  end
end

module Exceptions
  class AccessDeniedError < Exception
  end

  class SymlinkCreationError < Exception
  end
end

class Windows
  include Exceptions

  def self.symlink(original, link)
    # we have to use mklink from windows
    # but it requires elevated previleges
    raise AccessDeniedError unless elevated?
    puts File.expand_path_windows(link)
    puts File.expand_path_windows(original)
    puts "MKLINK /D #{File.expand_path_windows(link)} #{File.expand_path_windows(original)}"
    o = system("MKLINK /D #{File.expand_path_windows(link)} #{File.expand_path_windows(original)}")
    raise SymlinkCreationError unless o
  end

  def self.elevated?
    return system("reg query \"HKU\\S-1-5-19\"")
  end
end

